{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyrab\\\\Documents\\\\WPI\\\\Computer_Science\\\\MQP\\\\BrainEx-UI\\\\BrainEx\\\\src\\\\Components\\\\chartComponents\\\\Axis.js\";\nimport React from \"react\";\nimport { select, selectAll } from \"d3-selection\";\nimport { axisBottom, axisLeft } from \"d3-axis\";\nimport { transition } from 'd3-transition';\n\nclass Axis extends React.Component {\n  constructor() {\n    super();\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    this.renderAxis();\n  }\n\n  componentDidUpdate() {\n    this.updateAxis();\n  }\n\n  renderAxis() {\n    const {\n      scale,\n      orient,\n      ticks\n    } = this.props;\n    const node = this.ref.current;\n    let axis;\n\n    if (orient === \"bottom\") {\n      axis = axisBottom(scale);\n    }\n\n    if (orient === \"left\") {\n      axis = axisLeft(scale).ticks(ticks);\n    }\n\n    select(node).call(axis);\n  }\n\n  updateAxis() {\n    const {\n      scale,\n      orient,\n      ticks\n    } = this.props;\n    const t = transition().duration(1000);\n\n    if (orient === \"left\") {\n      const axis = axisLeft(scale).ticks(ticks);\n      selectAll(`.${orient}`).transition(t).call(axis);\n    }\n  }\n\n  render() {\n    const {\n      orient,\n      transform\n    } = this.props;\n    return React.createElement(\"g\", {\n      ref: this.ref,\n      transform: transform,\n      className: `${orient} axis`,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n  }\n\n}\n\nexport default Axis;","map":{"version":3,"sources":["C:/Users/kyrab/Documents/WPI/Computer_Science/MQP/BrainEx-UI/BrainEx/src/Components/chartComponents/Axis.js"],"names":["React","select","selectAll","axisBottom","axisLeft","transition","Axis","Component","constructor","ref","createRef","componentDidMount","renderAxis","componentDidUpdate","updateAxis","scale","orient","ticks","props","node","current","axis","call","t","duration","render","transform"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,MAAR,EAAgBC,SAAhB,QAAgC,cAAhC;AACA,SAAQC,UAAR,EAAoBC,QAApB,QAAmC,SAAnC;AACA,SAAQC,UAAR,QAAyB,eAAzB;;AAEA,MAAMC,IAAN,SAAmBN,KAAK,CAACO,SAAzB,CAAmC;AAC/BC,EAAAA,WAAW,GAAG;AACV;AACA,SAAKC,GAAL,GAAWT,KAAK,CAACU,SAAN,EAAX;AACH;;AAEDC,EAAAA,iBAAiB,GAAG;AAChB,SAAKC,UAAL;AACH;;AAEDC,EAAAA,kBAAkB,GAAG;AACjB,SAAKC,UAAL;AACH;;AAEDF,EAAAA,UAAU,GAAG;AACT,UAAM;AAACG,MAAAA,KAAD;AAAQC,MAAAA,MAAR;AAAgBC,MAAAA;AAAhB,QAAyB,KAAKC,KAApC;AACA,UAAMC,IAAI,GAAG,KAAKV,GAAL,CAASW,OAAtB;AACA,QAAIC,IAAJ;;AAEA,QAAIL,MAAM,KAAK,QAAf,EAAyB;AACrBK,MAAAA,IAAI,GAAGlB,UAAU,CAACY,KAAD,CAAjB;AACH;;AACD,QAAIC,MAAM,KAAK,MAAf,EAAuB;AACnBK,MAAAA,IAAI,GAAGjB,QAAQ,CAACW,KAAD,CAAR,CACFE,KADE,CACIA,KADJ,CAAP;AAEH;;AACDhB,IAAAA,MAAM,CAACkB,IAAD,CAAN,CAAaG,IAAb,CAAkBD,IAAlB;AACH;;AAEDP,EAAAA,UAAU,GAAG;AACT,UAAM;AAACC,MAAAA,KAAD;AAAQC,MAAAA,MAAR;AAAgBC,MAAAA;AAAhB,QAAyB,KAAKC,KAApC;AACA,UAAMK,CAAC,GAAGlB,UAAU,GAAGmB,QAAb,CAAsB,IAAtB,CAAV;;AAEA,QAAIR,MAAM,KAAK,MAAf,EAAuB;AACnB,YAAMK,IAAI,GAAGjB,QAAQ,CAACW,KAAD,CAAR,CAAgBE,KAAhB,CAAsBA,KAAtB,CAAb;AACAf,MAAAA,SAAS,CAAE,IAAGc,MAAO,EAAZ,CAAT,CAAwBX,UAAxB,CAAmCkB,CAAnC,EAAsCD,IAAtC,CAA2CD,IAA3C;AACH;AACJ;;AAEDI,EAAAA,MAAM,GAAG;AACL,UAAM;AAACT,MAAAA,MAAD;AAASU,MAAAA;AAAT,QAAsB,KAAKR,KAAjC;AACA,WACI;AACI,MAAA,GAAG,EAAE,KAAKT,GADd;AAEI,MAAA,SAAS,EAAEiB,SAFf;AAGI,MAAA,SAAS,EAAG,GAAEV,MAAO,OAHzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADJ;AAOH;;AAhD8B;;AAmDnC,eAAeV,IAAf","sourcesContent":["import React from \"react\";\r\nimport {select, selectAll} from \"d3-selection\";\r\nimport {axisBottom, axisLeft} from \"d3-axis\";\r\nimport {transition} from 'd3-transition';\r\n\r\nclass Axis extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.ref = React.createRef();\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.renderAxis();\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        this.updateAxis();\r\n    }\r\n\r\n    renderAxis() {\r\n        const {scale, orient, ticks} = this.props;\r\n        const node = this.ref.current;\r\n        let axis;\r\n\r\n        if (orient === \"bottom\") {\r\n            axis = axisBottom(scale);\r\n        }\r\n        if (orient === \"left\") {\r\n            axis = axisLeft(scale)\r\n                .ticks(ticks);\r\n        }\r\n        select(node).call(axis);\r\n    }\r\n\r\n    updateAxis() {\r\n        const {scale, orient, ticks} = this.props;\r\n        const t = transition().duration(1000)\r\n\r\n        if (orient === \"left\") {\r\n            const axis = axisLeft(scale).ticks(ticks);\r\n            selectAll(`.${orient}`).transition(t).call(axis)\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const {orient, transform} = this.props;\r\n        return (\r\n            <g\r\n                ref={this.ref}\r\n                transform={transform}\r\n                className={`${orient} axis`}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nexport default Axis;\r\n"]},"metadata":{},"sourceType":"module"}