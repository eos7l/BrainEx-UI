{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kyrab\\\\Documents\\\\WPI\\\\Computer_Science\\\\MQP\\\\BrainEx-UI\\\\BrainEx\\\\src\\\\Components\\\\Filter.js\";\nimport React from 'react';\nimport Divider from \"@material-ui/core/Divider\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Title from \"./Title\";\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport clsx from 'clsx';\nimport Typography from '@material-ui/core/Typography';\nimport Slider from '@material-ui/core/Slider';\nimport Input from '@material-ui/core/Input';\nimport Grid from '@material-ui/core/Grid';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport TextField from '@material-ui/core/TextField';\n\nfunction preventDefault(event) {\n  event.preventDefault();\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexWrap: 'wrap',\n    flexDirection: 'column',\n    alignItems: 'center',\n    '& .MuiTextField-root': {\n      margin: theme.spacing(2)\n    },\n    padding: theme.spacing(1)\n  },\n  margin: {\n    margin: theme.spacing(1)\n  }\n}));\n\nfunction valuetext(value) {\n  return `${value}milisecond`;\n}\n\nexport default function Filter() {\n  const classes = useStyles(); //range slider\n\n  const [value, setValue] = React.useState([20, 37]); //overlap percentage default\n\n  const [values, setValues] = React.useState({\n    percentage: '40'\n  });\n\n  const handleChange = prop => event => {\n    // setState({ ...state, [name]: event.target.checked });\n    setValues({ ...values,\n      [prop]: event.target.value\n    });\n  };\n\n  const handleRangeChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleSliderChangeStart = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleSliderChangeEnd = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  const handleInputChangeStart = event => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleInputChangeEnd = event => {\n    setValue(event.target.value === '' ? '' : Number(event.target.value));\n  };\n\n  const handleBlur = () => {\n    if (value < 0) {\n      setValue(0);\n    } else if (value > 100) {\n      setValue(100);\n    }\n  };\n\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(Title, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Filter\"), React.createElement(Divider, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }), React.createElement(\"form\", {\n    className: classes.root,\n    noValidate: true,\n    autoComplete: \"off\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(FormControl, {\n    component: \"fieldset\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, React.createElement(FormGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  }, React.createElement(Typography, {\n    id: \"range-slider\",\n    gutterBottom: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95\n    },\n    __self: this\n  }, \"Length of interest of sequence matches\"), React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: classes.input,\n    value: value,\n    margin: \"dense\",\n    onChange: handleInputChangeStart,\n    onBlur: handleBlur,\n    inputProps: {\n      step: 10,\n      min: 0,\n      max: 100,\n      type: 'number',\n      'aria-labelledby': 'input-slider'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    xs: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, React.createElement(Slider // value={value}\n  , {\n    value: value,\n    onChange: handleRangeChange,\n    valueLabelDisplay: \"auto\",\n    \"aria-labelledby\": \"range-slider\",\n    getAriaValueText: valuetext,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  })), React.createElement(Grid, {\n    item: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131\n    },\n    __self: this\n  }, React.createElement(Input, {\n    className: classes.input,\n    value: value,\n    margin: \"dense\",\n    onChange: handleInputChangeEnd,\n    onBlur: handleBlur,\n    valueLabelDisplay: \"auto\",\n    inputProps: {\n      step: 10,\n      min: 0,\n      max: 100,\n      type: 'number',\n      'aria-labelledby': 'input-slider'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }))), React.createElement(TextField, {\n    required: true,\n    id: \"outlined-number\",\n    label: \"Number of best sequence matches\",\n    placeholder: \"5\",\n    multiline: true,\n    type: \"number\",\n    size: \"small\",\n    variant: \"filled\" // InputLabelProps={{\n    //     shrink: true,\n    // }}\n    ,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }), React.createElement(TextField, {\n    required: true,\n    variant: \"filled\",\n    label: \"Overlap of sequence allowed\",\n    id: \"overlap-percentage\",\n    size: \"small\",\n    placeholder: \"40\",\n    className: clsx(classes.margin, classes.textField),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"start\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }, \"%\")\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }), React.createElement(FormControlLabel, {\n    value: \"checkBox\",\n    control: React.createElement(Checkbox, {\n      color: \"primary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    }),\n    label: \"Exclude subsequence matches from current sequence\",\n    labelPlacement: \"end\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  })))), React.createElement(\"div\", {\n    className: classes.root,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(ButtonGroup, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188\n    },\n    __self: this\n  }, React.createElement(Button, {\n    size: \"medium\",\n    variant: \"contained\",\n    color: \"primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 189\n    },\n    __self: this\n  }, \"Apply\"), React.createElement(Button, {\n    size: \"medium\",\n    variant: \"contained\",\n    color: \"default\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, \"Clear\")))));\n}","map":{"version":3,"sources":["C:/Users/kyrab/Documents/WPI/Computer_Science/MQP/BrainEx-UI/BrainEx/src/Components/Filter.js"],"names":["React","Divider","makeStyles","Title","Button","ButtonGroup","FormControl","FormGroup","FormControlLabel","Checkbox","clsx","Typography","Slider","Input","Grid","InputAdornment","TextField","preventDefault","event","useStyles","theme","root","display","flexWrap","flexDirection","alignItems","margin","spacing","padding","valuetext","value","Filter","classes","setValue","useState","values","setValues","percentage","handleChange","prop","target","handleRangeChange","newValue","handleSliderChangeStart","handleSliderChangeEnd","handleInputChangeStart","Number","handleInputChangeEnd","handleBlur","input","step","min","max","type","textField","endAdornment"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport Title from \"./Title\";\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport clsx from 'clsx';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Slider from '@material-ui/core/Slider';\r\nimport Input from '@material-ui/core/Input';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\n\r\nfunction preventDefault(event) {\r\n    event.preventDefault();\r\n}\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        flexDirection: 'column',\r\n        alignItems: 'center',\r\n        '& .MuiTextField-root': {\r\n            margin: theme.spacing(2),\r\n\r\n        },\r\n        padding: theme.spacing(1),\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n}));\r\n\r\n\r\nfunction valuetext(value) {\r\n    return `${value}milisecond`;\r\n}\r\n\r\nexport default function Filter() {\r\n    const classes = useStyles();\r\n    //range slider\r\n    const [value, setValue] = React.useState([20, 37]);\r\n    //overlap percentage default\r\n    const [values, setValues] = React.useState({\r\n        percentage: '40',\r\n    });\r\n\r\n    const handleChange = prop => event => {\r\n        // setState({ ...state, [name]: event.target.checked });\r\n        setValues({...values, [prop]: event.target.value});\r\n    };\r\n\r\n    const handleRangeChange = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n\r\n    const handleSliderChangeStart = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n    const handleSliderChangeEnd = (event, newValue) => {\r\n        setValue(newValue);\r\n    };\r\n\r\n    const handleInputChangeStart = event => {\r\n        setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n    };\r\n    const handleInputChangeEnd = event => {\r\n        setValue(event.target.value === '' ? '' : Number(event.target.value));\r\n    };\r\n\r\n    const handleBlur = () => {\r\n        if (value < 0) {\r\n            setValue(0);\r\n        } else if (value > 100) {\r\n            setValue(100);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <React.Fragment>\r\n                <Title>Filter</Title>\r\n                <Divider/>\r\n                <form className={classes.root} noValidate autoComplete=\"off\">\r\n                    <FormControl component=\"fieldset\">\r\n                        <FormGroup>\r\n                            <Typography id=\"range-slider\" gutterBottom>\r\n                                Length of interest of sequence matches\r\n                            </Typography>\r\n                            <Grid container spacing={2} alignItems=\"center\">\r\n                                <Grid item>\r\n                                    <Input\r\n                                        className={classes.input}\r\n                                        value={value}\r\n                                        margin=\"dense\"\r\n                                        onChange={handleInputChangeStart}\r\n                                        onBlur={handleBlur}\r\n                                        inputProps={{\r\n                                            step: 10,\r\n                                            min: 0,\r\n                                            max: 100,\r\n                                            type: 'number',\r\n                                            'aria-labelledby': 'input-slider',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item xs>\r\n                                    {/*<Slider*/}\r\n                                    {/*    // value={typeof value === 'number' ? value : 0}*/}\r\n                                    {/*    onChange={handleSliderChangeEnd}*/}\r\n                                    {/*    aria-labelledby=\"input-slider\"*/}\r\n                                    {/*/>*/}\r\n\r\n                                    <Slider\r\n                                        // value={value}\r\n                                        value={value}\r\n                                        onChange={handleRangeChange}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        aria-labelledby=\"range-slider\"\r\n                                        getAriaValueText={valuetext}\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Input\r\n                                        className={classes.input}\r\n                                        value={value}\r\n                                        margin=\"dense\"\r\n                                        onChange={handleInputChangeEnd}\r\n                                        onBlur={handleBlur}\r\n                                        valueLabelDisplay=\"auto\"\r\n                                        inputProps={{\r\n                                            step: 10,\r\n                                            min: 0,\r\n                                            max: 100,\r\n                                            type: 'number',\r\n                                            'aria-labelledby': 'input-slider',\r\n                                        }}\r\n                                    />\r\n                                </Grid>\r\n                            </Grid>\r\n\r\n                            <TextField\r\n                                required\r\n                                id=\"outlined-number\"\r\n                                label=\"Number of best sequence matches\"\r\n                                placeholder=\"5\"\r\n                                multiline\r\n                                type=\"number\"\r\n                                size=\"small\"\r\n                                variant=\"filled\"\r\n                                // InputLabelProps={{\r\n                                //     shrink: true,\r\n                                // }}\r\n                            />\r\n                            <TextField\r\n                                required\r\n                                variant=\"filled\"\r\n                                label=\"Overlap of sequence allowed\"\r\n                                id=\"overlap-percentage\"\r\n                                size=\"small\"\r\n                                placeholder=\"40\"\r\n                                className={clsx(classes.margin, classes.textField)}\r\n                                InputProps={{\r\n                                    endAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\r\n                                }}\r\n                            />\r\n\r\n                            <FormControlLabel\r\n                                value=\"checkBox\"\r\n                                control={<Checkbox color=\"primary\"/>}\r\n                                label=\"Exclude subsequence matches from current sequence\"\r\n                                labelPlacement=\"end\"\r\n                            />\r\n\r\n\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n                <div className={classes.root}>\r\n                    <ButtonGroup>\r\n                        <Button size=\"medium\" variant=\"contained\" color=\"primary\">\r\n                            Apply\r\n                        </Button>\r\n                        <Button size=\"medium\" variant=\"contained\" color=\"default\">\r\n                            Clear\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </div>\r\n            </React.Fragment>\r\n        </React.Fragment>\r\n    );\r\n}"]},"metadata":{},"sourceType":"module"}