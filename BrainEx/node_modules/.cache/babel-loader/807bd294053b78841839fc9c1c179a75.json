{"ast":null,"code":"'use strict'; // ### Module dependencies\n\nvar colors = require('colors/safe');\n\nvar Utils = require('./utils');\n\nexports.version = require('../package.json').version; // Helper function to detect if an object can be directly serializable\n\nvar isSerializable = function (input, onlyPrimitives, options) {\n  if (typeof input === 'boolean' || typeof input === 'number' || typeof input === 'function' || input === null || input instanceof Date) {\n    return true;\n  }\n\n  if (typeof input === 'string' && input.indexOf('\\n') === -1) {\n    return true;\n  }\n\n  if (options.inlineArrays && !onlyPrimitives) {\n    if (Array.isArray(input) && isSerializable(input[0], true, options)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar addColorToData = function (input, options) {\n  if (options.noColor) {\n    return input;\n  }\n\n  if (typeof input === 'string') {\n    // Print strings in regular terminal color\n    return options.stringColor ? colors[options.stringColor](input) : input;\n  }\n\n  var sInput = input + '';\n\n  if (input === true) {\n    return colors.green(sInput);\n  }\n\n  if (input === false) {\n    return colors.red(sInput);\n  }\n\n  if (input === null) {\n    return colors.grey(sInput);\n  }\n\n  if (typeof input === 'number') {\n    return colors[options.numberColor](sInput);\n  }\n\n  if (typeof input === 'function') {\n    return 'function() {}';\n  }\n\n  if (Array.isArray(input)) {\n    return input.join(', ');\n  }\n\n  return sInput;\n};\n\nvar indentLines = function (string, spaces) {\n  var lines = string.split('\\n');\n  lines = lines.map(function (line) {\n    return Utils.indent(spaces) + line;\n  });\n  return lines.join('\\n');\n};\n\nvar renderToArray = function (data, options, indentation) {\n  if (isSerializable(data, false, options)) {\n    return [Utils.indent(indentation) + addColorToData(data, options)];\n  } // Unserializable string means it's multiline\n\n\n  if (typeof data === 'string') {\n    return [Utils.indent(indentation) + '\"\"\"', indentLines(data, indentation + options.defaultIndentation), Utils.indent(indentation) + '\"\"\"'];\n  }\n\n  if (Array.isArray(data)) {\n    // If the array is empty, render the `emptyArrayMsg`\n    if (data.length === 0) {\n      return [Utils.indent(indentation) + options.emptyArrayMsg];\n    }\n\n    var outputArray = [];\n    data.forEach(function (element) {\n      // Prepend the dash at the begining of each array's element line\n      var line = '- ';\n\n      if (!options.noColor) {\n        line = colors[options.dashColor](line);\n      }\n\n      line = Utils.indent(indentation) + line; // If the element of the array is a string, bool, number, or null\n      // render it in the same line\n\n      if (isSerializable(element, false, options)) {\n        line += renderToArray(element, options, 0)[0];\n        outputArray.push(line); // If the element is an array or object, render it in next line\n      } else {\n        outputArray.push(line);\n        outputArray.push.apply(outputArray, renderToArray(element, options, indentation + options.defaultIndentation));\n      }\n    });\n    return outputArray;\n  }\n\n  if (data instanceof Error) {\n    return renderToArray({\n      message: data.message,\n      stack: data.stack.split('\\n')\n    }, options, indentation);\n  } // If values alignment is enabled, get the size of the longest index\n  // to align all the values\n\n\n  var maxIndexLength = options.noAlign ? 0 : Utils.getMaxIndexLength(data);\n  var key;\n  var output = [];\n  Object.getOwnPropertyNames(data).forEach(function (i) {\n    // Prepend the index at the beginning of the line\n    key = i + ': ';\n\n    if (!options.noColor) {\n      key = colors[options.keysColor](key);\n    }\n\n    key = Utils.indent(indentation) + key; // Skip `undefined`, it's not a valid JSON value.\n\n    if (data[i] === undefined) {\n      return;\n    } // If the value is serializable, render it in the same line\n\n\n    if (isSerializable(data[i], false, options)) {\n      var nextIndentation = options.noAlign ? 0 : maxIndexLength - i.length;\n      key += renderToArray(data[i], options, nextIndentation)[0];\n      output.push(key); // If the index is an array or object, render it in next line\n    } else {\n      output.push(key);\n      output.push.apply(output, renderToArray(data[i], options, indentation + options.defaultIndentation));\n    }\n  });\n  return output;\n}; // ### Render function\n// *Parameters:*\n//\n// * **`data`**: Data to render\n// * **`options`**: Hash with different options to configure the parser\n// * **`indentation`**: Base indentation of the parsed output\n//\n// *Example of options hash:*\n//\n//     {\n//       emptyArrayMsg: '(empty)', // Rendered message on empty strings\n//       keysColor: 'blue',        // Color for keys in hashes\n//       dashColor: 'red',         // Color for the dashes in arrays\n//       stringColor: 'grey',      // Color for strings\n//       defaultIndentation: 2     // Indentation on nested objects\n//     }\n\n\nexports.render = function render(data, options, indentation) {\n  // Default values\n  indentation = indentation || 0;\n  options = options || {};\n  options.emptyArrayMsg = options.emptyArrayMsg || '(empty array)';\n  options.keysColor = options.keysColor || 'green';\n  options.dashColor = options.dashColor || 'green';\n  options.numberColor = options.numberColor || 'blue';\n  options.defaultIndentation = options.defaultIndentation || 2;\n  options.noColor = !!options.noColor;\n  options.noAlign = !!options.noAlign;\n  options.stringColor = options.stringColor || null;\n  return renderToArray(data, options, indentation).join('\\n');\n}; // ### Render from string function\n// *Parameters:*\n//\n// * **`data`**: Data to render as a string\n// * **`options`**: Hash with different options to configure the parser\n// * **`indentation`**: Base indentation of the parsed output\n//\n// *Example of options hash:*\n//\n//     {\n//       emptyArrayMsg: '(empty)', // Rendered message on empty strings\n//       keysColor: 'blue',        // Color for keys in hashes\n//       dashColor: 'red',         // Color for the dashes in arrays\n//       defaultIndentation: 2     // Indentation on nested objects\n//     }\n\n\nexports.renderString = function renderString(data, options, indentation) {\n  var output = '';\n  var parsedData; // If the input is not a string or if it's empty, just return an empty string\n\n  if (typeof data !== 'string' || data === '') {\n    return '';\n  } // Remove non-JSON characters from the beginning string\n\n\n  if (data[0] !== '{' && data[0] !== '[') {\n    var beginingOfJson;\n\n    if (data.indexOf('{') === -1) {\n      beginingOfJson = data.indexOf('[');\n    } else if (data.indexOf('[') === -1) {\n      beginingOfJson = data.indexOf('{');\n    } else if (data.indexOf('{') < data.indexOf('[')) {\n      beginingOfJson = data.indexOf('{');\n    } else {\n      beginingOfJson = data.indexOf('[');\n    }\n\n    output += data.substr(0, beginingOfJson) + '\\n';\n    data = data.substr(beginingOfJson);\n  }\n\n  try {\n    parsedData = JSON.parse(data);\n  } catch (e) {\n    // Return an error in case of an invalid JSON\n    return colors.red('Error:') + ' Not valid JSON!';\n  } // Call the real render() method\n\n\n  output += exports.render(parsedData, options, indentation);\n  return output;\n};","map":{"version":3,"sources":["C:/Users/mags1/PycharmProjects/BrainEx-UI/BrainEx/node_modules/prettyjson/lib/prettyjson.js"],"names":["colors","require","Utils","exports","version","isSerializable","input","onlyPrimitives","options","Date","indexOf","inlineArrays","Array","isArray","addColorToData","noColor","stringColor","sInput","green","red","grey","numberColor","join","indentLines","string","spaces","lines","split","map","line","indent","renderToArray","data","indentation","defaultIndentation","length","emptyArrayMsg","outputArray","forEach","element","dashColor","push","apply","Error","message","stack","maxIndexLength","noAlign","getMaxIndexLength","key","output","Object","getOwnPropertyNames","i","keysColor","undefined","nextIndentation","render","renderString","parsedData","beginingOfJson","substr","JSON","parse","e"],"mappings":"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","sourcesContent":["'use strict';\n\n// ### Module dependencies\nvar colors = require('colors/safe');\nvar Utils = require('./utils');\n\nexports.version = require('../package.json').version;\n\n// Helper function to detect if an object can be directly serializable\nvar isSerializable = function(input, onlyPrimitives, options) {\n  if (\n    typeof input === 'boolean' ||\n    typeof input === 'number' ||\n    typeof input === 'function' ||\n    input === null ||\n    input instanceof Date\n  ) {\n    return true;\n  }\n  if (typeof input === 'string' && input.indexOf('\\n') === -1) {\n    return true;\n  }\n\n  if (options.inlineArrays && !onlyPrimitives) {\n    if (Array.isArray(input) && isSerializable(input[0], true, options)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nvar addColorToData = function(input, options) {\n  if (options.noColor) {\n    return input;\n  }\n\n  if (typeof input === 'string') {\n    // Print strings in regular terminal color\n    return options.stringColor ? colors[options.stringColor](input) : input;\n  }\n\n  var sInput = input + '';\n\n  if (input === true) {\n    return colors.green(sInput);\n  }\n  if (input === false) {\n    return colors.red(sInput);\n  }\n  if (input === null) {\n    return colors.grey(sInput);\n  }\n  if (typeof input === 'number') {\n    return colors[options.numberColor](sInput);\n  }\n  if (typeof input === 'function') {\n    return 'function() {}';\n  }\n\n  if (Array.isArray(input)) {\n    return input.join(', ');\n  }\n\n  return sInput;\n};\n\nvar indentLines = function(string, spaces){\n  var lines = string.split('\\n');\n  lines = lines.map(function(line){\n    return Utils.indent(spaces) + line;\n  });\n  return lines.join('\\n');\n};\n\nvar renderToArray = function(data, options, indentation) {\n  if (isSerializable(data, false, options)) {\n    return [Utils.indent(indentation) + addColorToData(data, options)];\n  }\n\n  // Unserializable string means it's multiline\n  if (typeof data === 'string') {\n    return [\n      Utils.indent(indentation) + '\"\"\"',\n      indentLines(data, indentation + options.defaultIndentation),\n      Utils.indent(indentation) + '\"\"\"'\n    ];\n  }\n\n\n  if (Array.isArray(data)) {\n    // If the array is empty, render the `emptyArrayMsg`\n    if (data.length === 0) {\n      return [Utils.indent(indentation) + options.emptyArrayMsg];\n    }\n\n    var outputArray = [];\n\n    data.forEach(function(element) {\n      // Prepend the dash at the begining of each array's element line\n      var line = '- ';\n      if (!options.noColor) {\n        line = colors[options.dashColor](line);\n      }\n      line = Utils.indent(indentation) + line;\n\n      // If the element of the array is a string, bool, number, or null\n      // render it in the same line\n      if (isSerializable(element, false, options)) {\n        line += renderToArray(element, options, 0)[0];\n        outputArray.push(line);\n\n      // If the element is an array or object, render it in next line\n      } else {\n        outputArray.push(line);\n        outputArray.push.apply(\n          outputArray,\n          renderToArray(\n            element, options, indentation + options.defaultIndentation\n          )\n        );\n      }\n    });\n\n    return outputArray;\n  }\n\n  if (data instanceof Error) {\n    return renderToArray(\n      {\n        message: data.message,\n        stack: data.stack.split('\\n')\n      },\n      options,\n      indentation\n    );\n  }\n\n  // If values alignment is enabled, get the size of the longest index\n  // to align all the values\n  var maxIndexLength = options.noAlign ? 0 : Utils.getMaxIndexLength(data);\n  var key;\n  var output = [];\n\n  Object.getOwnPropertyNames(data).forEach(function(i) {\n    // Prepend the index at the beginning of the line\n    key = (i + ': ');\n    if (!options.noColor) {\n      key = colors[options.keysColor](key);\n    }\n    key = Utils.indent(indentation) + key;\n\n    // Skip `undefined`, it's not a valid JSON value.\n    if (data[i] === undefined) {\n      return;\n    }\n\n    // If the value is serializable, render it in the same line\n    if (isSerializable(data[i], false, options)) {\n      var nextIndentation = options.noAlign ? 0 : maxIndexLength - i.length;\n      key += renderToArray(data[i], options, nextIndentation)[0];\n      output.push(key);\n\n      // If the index is an array or object, render it in next line\n    } else {\n      output.push(key);\n      output.push.apply(\n        output,\n        renderToArray(\n          data[i],\n          options,\n          indentation + options.defaultIndentation\n        )\n      );\n    }\n  });\n  return output;\n};\n\n// ### Render function\n// *Parameters:*\n//\n// * **`data`**: Data to render\n// * **`options`**: Hash with different options to configure the parser\n// * **`indentation`**: Base indentation of the parsed output\n//\n// *Example of options hash:*\n//\n//     {\n//       emptyArrayMsg: '(empty)', // Rendered message on empty strings\n//       keysColor: 'blue',        // Color for keys in hashes\n//       dashColor: 'red',         // Color for the dashes in arrays\n//       stringColor: 'grey',      // Color for strings\n//       defaultIndentation: 2     // Indentation on nested objects\n//     }\nexports.render = function render(data, options, indentation) {\n  // Default values\n  indentation = indentation || 0;\n  options = options || {};\n  options.emptyArrayMsg = options.emptyArrayMsg || '(empty array)';\n  options.keysColor = options.keysColor || 'green';\n  options.dashColor = options.dashColor || 'green';\n  options.numberColor = options.numberColor || 'blue';\n  options.defaultIndentation = options.defaultIndentation || 2;\n  options.noColor = !!options.noColor;\n  options.noAlign = !!options.noAlign;\n\n  options.stringColor = options.stringColor || null;\n\n  return renderToArray(data, options, indentation).join('\\n');\n};\n\n// ### Render from string function\n// *Parameters:*\n//\n// * **`data`**: Data to render as a string\n// * **`options`**: Hash with different options to configure the parser\n// * **`indentation`**: Base indentation of the parsed output\n//\n// *Example of options hash:*\n//\n//     {\n//       emptyArrayMsg: '(empty)', // Rendered message on empty strings\n//       keysColor: 'blue',        // Color for keys in hashes\n//       dashColor: 'red',         // Color for the dashes in arrays\n//       defaultIndentation: 2     // Indentation on nested objects\n//     }\nexports.renderString = function renderString(data, options, indentation) {\n\n  var output = '';\n  var parsedData;\n  // If the input is not a string or if it's empty, just return an empty string\n  if (typeof data !== 'string' || data === '') {\n    return '';\n  }\n\n  // Remove non-JSON characters from the beginning string\n  if (data[0] !== '{' && data[0] !== '[') {\n    var beginingOfJson;\n    if (data.indexOf('{') === -1) {\n      beginingOfJson = data.indexOf('[');\n    } else if (data.indexOf('[') === -1) {\n      beginingOfJson = data.indexOf('{');\n    } else if (data.indexOf('{') < data.indexOf('[')) {\n      beginingOfJson = data.indexOf('{');\n    } else {\n      beginingOfJson = data.indexOf('[');\n    }\n    output += data.substr(0, beginingOfJson) + '\\n';\n    data = data.substr(beginingOfJson);\n  }\n\n  try {\n    parsedData = JSON.parse(data);\n  } catch (e) {\n    // Return an error in case of an invalid JSON\n    return colors.red('Error:') + ' Not valid JSON!';\n  }\n\n  // Call the real render() method\n  output += exports.render(parsedData, options, indentation);\n  return output;\n};\n"]},"metadata":{},"sourceType":"script"}